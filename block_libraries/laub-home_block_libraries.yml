uid: Blocklibraries_laub-home.de
tags:
  - heating
  - thermostat
  - control
  - Thing
  - laub-home
props:
  parameters: []
  parameterGroups: []
timestamp: Dec 3, 2024, 2:27:32 PM
component: BlockLibrary
config:
  name: Blocklibraries laub-home.de
slots:
  blocks:
    - component: BlockType
      config:
        type: Thermostat Control
        inputsInline: false
        message0: Control thermostat (thermostat switch item) %1 
          with setpoint temperature (setpoint item) %2, 
          heating valve (switch item) %3, 
          temperature sensor (temperature item) %4, 
          hysteresis (in °C) (Number) %5, 
          absence reduction (in °C) (Number) %6, 
          green increase (in °C) %7, 
          night start (time) %8, 
          night stop (time) %9, 
          night reduction (in °C) (Number) %10, 
          (optional) Absence (switch item state, or default "ON") %11,
          (optional) Booster (switch item state, or default "OFF") %12, 
          (optional) Smart-Grid Mode (red-orange-green item state, or default "orange") %13, 
          and set loglevel %14
        nextStatement: ""
        previousStatement: ""  
        args0:
          - name: THERMOSTAT
            type: input_value
          - name: SETPOINTTEMPERATURE
            type: input_value
          - name: HEATINGVALVE
            type: input_value
          - name: TEMPERATURESENSOR
            type: input_value
          - name: HYSTERESIS
            type: input_value
          - name: ABSENCEREDUCTION
            type: input_value
          - name: GREENINCREASE
            type: input_value
          - name: NIGHTSTART
            type: input_value
          - name: NIGHTSTOP
            type: input_value
          - name: NIGHTREDUCTION
            type: input_value
          - name: ABSENCE
            type: input_value
          - name: BOOSTER
            type: input_value
          - name: SMARTGRID
            type: input_value     
          - name: LOGLEVEL
            options:
              - - info
                - "info"
              - - warn
                - "warn"
              - - error
                - "error"
              - - debug
                - "debug"      
            type: field_dropdown
        colour: 90
        tooltip: Control a thermostat with dynamic parameters and OpenHAB items.
        helpUrl: ""
      slots:
        code:
          - component: BlockCodeTemplate
            config:
              template: >
                var { time, items } = require('openhab');
                var ruleUID = this.ruleUID;
                var logger = Java.type('org.slf4j.LoggerFactory').getLogger(`org.openhab.rule.ThermoCtrl.${ruleUID}`);

                function controlThermostat(config) {
                  const {
                    setpointTemperature,
                    heatingvalve,
                    hysteresis,
                    temperaturesensor,
                    thermostat,
                    absencereduction,
                    greenincrease,
                    nightstart,
                    nightstop,
                    nightreduction,
                    loglevel,
                    absence,
                    booster,
                    smartgrid,
                  } = config;

                  // Initialize logging
                  const log = logger[loglevel] || logger.error;
                  log(`Thermostat - Loglevel set to: ${loglevel}`);
                  
                  const currentTemperature = Quantity(items.getItem(temperaturesensor).state);
                  const thermostatTemperature = Quantity(items.getItem(setpointTemperature).state);

                  log(`Thermostat - running: ${items.getItem(thermostat).label} - Valve power: ${items.getItem(heatingvalve).state}`);
                  log(`Current temperature: ${currentTemperature} - Thermostat setpoint temperature: ${thermostatTemperature}`);
                  log(`Heating ON temperature value: ${thermostatTemperature.subtract(Quantity(hysteresis + '°C'))} - Heating OFF temperature value: ${thermostatTemperature}`);

                  let setpoint = thermostatTemperature;

                  if (booster === 'OFF') {
                    log('Booster Switch is OFF');
                    if (items.getItem(thermostat).state === 'ON') {
                      log('Thermostat Switch is ON');

                      // Absence and SG-red check
                      if (absence === 'OFF' && smartgrid === 'red') {
                        setpoint = thermostatTemperature.subtract(Quantity(absencereduction + '°C'));
                        log(`Absence and SG-RED Mode - used setpoint temperature: ${setpoint}`);
                      } else {
                        // SG-Modus green
                        if (smartgrid === 'green') {
                          setpoint = thermostatTemperature.add(Quantity(greenincrease + '°C'));
                          log(`Heat pump SG-Green mode - used setpoint temperature: ${setpoint}`);
                        }

                        // Night setback
                        const now = time.ZonedDateTime.now();

                        // Conversion of inputs into valid time stamps
                        const parsedNightStart = time.toZDT(nightstart);
                        const parsedNightStop = time.toZDT(nightstop);

                        log(`Current Time: ${now}`);
                        log(`night start:  ${parsedNightStart}`);
                        log(`night end:    ${parsedNightStop}`);

                        // Check whether the current time is within the night period
                        if (now.isAfter(parsedNightStart) || now.isBefore(parsedNightStop)) {
                          setpoint = thermostatTemperature.subtract(Quantity(nightreduction + '°C'));
                          log(`Night setback active - used setpoint temperature: ${setpoint}`);
                        } else {
                          log(`Night setback deactivated - used setpoint temperature: ${setpoint}`);
                        }
                      }  

                      // Heating control
                      if (
                        items.getItem(heatingvalve).state === 'OFF' &&
                        currentTemperature.lessThanOrEqual(setpoint.subtract(Quantity(hysteresis + '°C')))
                      ) {
                        items.getItem(heatingvalve).sendCommand('ON');
                        log('Heating control - heating activated');
                      } else if (
                        items.getItem(heatingvalve).state === 'ON' &&
                        currentTemperature.greaterThanOrEqual(setpoint)
                      ) {
                        items.getItem(heatingvalve).sendCommand('OFF');
                        log('Heating control - heating deactivated');
                      }
                    } else {
                      log('Thermostat Switch is OFF');                     
                      if (items.getItem(heatingvalve).state === 'ON') {
                        items.getItem(heatingvalve).sendCommand('OFF');
                        log('Heating control - heating deactivated');
                      }
                    }
                  } else {
                    log('Thermostat - Booster Mode is ON')
                  }
                }

                controlThermostat({
                  setpointTemperature: {{input:SETPOINTTEMPERATURE}},
                  heatingvalve: {{input:HEATINGVALVE}},
                  temperaturesensor: {{input:TEMPERATURESENSOR}},
                  thermostat: {{input:THERMOSTAT}},
                  hysteresis: {{input:HYSTERESIS}},              
                  absencereduction: {{input:ABSENCEREDUCTION}}, 
                  greenincrease: {{input:GREENINCREASE}}, 
                  nightstart: {{input:NIGHTSTART}}, 
                  nightstop: {{input:NIGHTSTOP}}, 
                  nightreduction: {{input:NIGHTREDUCTION}},
                  loglevel: "{{field:LOGLEVEL}}",
                  absence: {{input:ABSENCE}},
                  booster: {{input:BOOSTER}},
                  smartgrid: {{input:SMARTGRID}}
                });
        toolbox:
          - component: PresetInput
            config:
              name: THERMOSTAT
              shadow: true
              type: oh_item
          - component: PresetInput
            config:
              name: HEATINGVALVE
              shadow: true
              type: oh_item
          - component: PresetInput
            config:
              name: SETPOINTTEMPERATURE
              shadow: true
              type: oh_item
          - component: PresetInput
            config:
              name: TEMPERATURESENSOR
              shadow: true
              type: oh_item
          - component: PresetInput
            config:
              name: NIGHTSTART
              fields:
                TEXT: 19:00
              shadow: true
              type: text
          - component: PresetInput
            config:
              name: NIGHTSTOP
              fields:
                TEXT: 08:15
              shadow: true
              type: text
          - component: PresetInput
            config:
              name: HYSTERESIS
              fields:
                NUM: "0.2"
              shadow: true
              type: math_number
          - component: PresetInput
            config:
              name: ABSENCEREDUCTION
              fields:
                NUM: "1"
              shadow: true
              type: math_number
          - component: PresetInput
            config:
              name: GREENINCREASE
              fields:
                NUM: "0.5"
              shadow: true
              type: math_number
          - component: PresetInput
            config:
              name: NIGHTREDUCTION
              fields:
                NUM: "0.5"
              shadow: true
              type: math_number
          - component: PresetInput
            config:
              name: ABSENCE
              fields:
                TEXT: ON
              shadow: true
              type: text
          - component: PresetInput
            config:
              name: BOOSTER
              fields:
                TEXT: OFF
              shadow: true
              type: text
          - component: PresetInput
            config:
              name: SMARTGRID
              fields:
                TEXT: orange
              shadow: true
              type: text
    - component: BlockType
      config:
        args0:
          - name: METHOD
            options:
              - - disable
                - "false"
              - - enable
                - "true"
            type: field_dropdown
          - name: THING_UID
            type: input_value
        colour: 0
        helpUrl: ""
        inputsInline: false
        message0: set %1 for Thing %2
        nextStatement: ""
        previousStatement: ""
        tooltip: Enable or disable a Thing by UID
        type: Thing controller
      slots:
        code:
          - component: BlockCodeTemplate
            config:
              template: >
                var thingMgr =
                osgi.getService('org.openhab.core.thing.ThingManager'); var
                ThingUID = Java.type('org.openhab.core.thing.ThingUID');
                thingMgr.setEnabled(new ThingUID({{input:THING_UID}}),
                {{field:METHOD}});
        toolbox:
          - component: PresetInput
            config:
              name: THING_UID
              shadow: true
              type: oh_thing
  utilities:
    - component: UtilityJavaType
      config:
        javaClass: org.openhab.core.thing.ThingManager
        name: thingMgr
