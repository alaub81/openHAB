uid: blocklibrary_thermostat_control
tags:
  - heating
  - thermostat
  - control
props:
  parameters: []
  parameterGroups: []
timestamp: Dec 3, 2024, 2:27:32 PM
component: BlockLibrary
config:
  name: Thermostat Control Block Library
slots:
  blocks:
    - component: BlockType
      config:
        type: thermostat_control
        inputsInline: false
        message0: Control thermostat (thermostat switch item) %1 with setpoint temperature (setpoint item) %2, heating valve (switch item) %3,
          temperature sensor (temperature item) %4, hysteresis (°C) %5, absence reduction (°C) %6, green
          increase (°C) %7, night start (time) %8, night stop (time) %9, night reduction (°C) %10, (optional) Absence (switch item) %11, (optional) Booster (switch item) %12, (optional) Smart-Grid Mode (red-orange-green item) %13, and set loglevel %14
        nextStatement: ""
        previousStatement: ""  
        args0:
          - name: THERMOSTAT
            type: input_value
          - name: SETPOINTTEMPERATURE
            type: input_value
          - name: HEATINGVALVE
            type: input_value
          - name: TEMPERATURESENSOR
            type: input_value
          - name: HYSTERESIS
            type: input_value
          - name: ABSENCEREDUCTION
            type: input_value
          - name: GREENINCREASE
            type: input_value
          - name: NIGHTSTART
            type: input_value
          - name: NIGHTSTOP
            type: input_value
          - name: NIGHTREDUCTION
            type: input_value
          - name: ABSENCE
            type: input_value
          - name: BOOSTER
            type: input_value
          - name: SMARTGRID
            type: input_value     
          - name: LOGLEVEL
            options:
              - - info
                - "info"
              - - warn
                - "warn"
              - - error
                - "error"
              - - debug
                - "debug"      
            type: field_dropdown
        colour: 90
        tooltip: Control a thermostat with dynamic parameters and OpenHAB items.
        helpUrl: ""
      slots:
        code:
          - component: BlockCodeTemplate
            config:
              template: >
                var { time, items } = require('openhab');
                var logger = Java.type('org.slf4j.LoggerFactory').getLogger('org.openhab.rule.ThermostatControl');

                function controlThermostat(config) {
                  const {
                    setpointTemperature,
                    heatingvalve,
                    hysteresis,
                    temperaturesensor,
                    thermostat,
                    absencereduction,
                    greenincrease,
                    nightstart,
                    nightstop,
                    nightreduction,
                    loglevel,
                    absence,
                    booster,
                    smartgrid,
                  } = config;

                  // Loglevel-Methoden als sichere Funktionen definieren
                  const logMethods = {
                    info: (msg) => logger.info(msg),
                    warn: (msg) => logger.warn(msg),
                    error: (msg) => logger.error(msg),
                    debug: (msg) => logger.debug(msg),
                  };

                  // Sicherstellen, dass das angegebene Loglevel existiert
                  let log;
                  if (logMethods[loglevel]) {
                    log = logMethods[loglevel];
                  } else {
                    logger.error(`Ungültiges Loglevel "${loglevel}" angegeben. Standardmäßig wird 'error' verwendet.`);
                    log = logger.error;
                  }

                  // Testlog, um sicherzustellen, dass die Loglevel-Zuweisung funktioniert
                  log(`Logger-Level gesetzt auf: ${loglevel}`);

                  // Sicherstellen, dass Booster, Absence und SmartGrid einen Standardwert haben, wenn sie nicht gesetzt sind
                  let boosterItem = items.getItem(booster);
                  if (!boosterItem) {
                    log('Booster item is not defined. Setting default state to OFF.');
                    boosterItem = { state: 'OFF' }; // Temporäres Objekt mit Standardwert erstellen
                  }

                  let absenceItem = items.getItem(absence);
                  if (!absenceItem) {
                    log('Absence item is not defined. Setting default state to OFF.');
                    absenceItem = { state: 'ON' }; // Temporäres Objekt mit Standardwert erstellen
                  }

                  let smartgridItem = items.getItem(smartgrid);
                  if (!smartgridItem) {
                    log('SmartGrid item is not defined. Setting default state to orange.');
                    smartgridItem = { state: 'orange' }; // Temporäres Objekt mit Standardwert erstellen
                  }

                  if (!items.getItem(setpointTemperature)) {
                    log(`Item ${setpointTemperature} not found!`);
                    return;
                  }
                  if (!items.getItem(heatingvalve)) {
                    log(`Item ${heatingvalve} not found!`);
                    return;
                  }
                  if (!items.getItem(temperaturesensor)) {
                    log(`Item ${temperaturesensor} not found!`);
                    return;
                  }
                  if (!items.getItem(thermostat)) {
                    log(`Item ${thermostat} not found!`);
                    return;
                  }

                  log(`Thermostat - running: ${items.getItem(thermostat).label} - Valve: ${items.getItem(heatingvalve).state}`);

                  const currentTemperature = Quantity(items.getItem(temperaturesensor).state);
                  const thermostatTemperature = Quantity(items.getItem(setpointTemperature).state);

                  log(`OFF Temperature: ${thermostatTemperature}`);
                  log(`ON Temperature: ${thermostatTemperature.subtract(Quantity(hysteresis + '°C'))}`);
                  log(`Temperature: ${currentTemperature} - Thermostat: ${thermostatTemperature}`);

                  let setpoint = thermostatTemperature;

                  if (items.getItem(booster).state === 'OFF') {
                    log('Booster is OFF');
                    if (items.getItem(thermostat).state === 'ON') {
                      log('Thermostat - ON');

                      // Abwesenheitsprüfung
                      if (items.getItem(absence).state === 'OFF' && items.getItem(smartgrid).state === 'red') {
                        setpoint = thermostatTemperature.subtract(Quantity(absencereduction + '°C'));
                        log(`Abwesenheitsabsenkung: ${setpoint}`);
                      } else {
                        // SG-Modus Grün
                        if (items.getItem(smartgrid).state === 'green') {
                          setpoint = thermostatTemperature.add(Quantity(greenincrease + '°C'));
                          log(`Wärmepumpe SG-Green: ${setpoint}`);
                        }

                        // Nachtabsenkung
                        const now = time.ZonedDateTime.now();

                        // Umwandlung der Eingaben in gültige Zeitstempel
                        const parsedNightStart = time.toZDT(nightstart);
                        const parsedNightStop = time.toZDT(nightstop);

                        log(`Aktuelle Zeit: ${now}`);
                        log(`Nachtstart: ${parsedNightStart}`);
                        log(`Nachtende: ${parsedNightStop}`);

                        // Prüfung, ob die aktuelle Zeit innerhalb des Nachtzeitraums liegt
                        if (now.isAfter(parsedNightStart) || now.isBefore(parsedNightStop)) {
                          setpoint = thermostatTemperature.subtract(Quantity(nightreduction + '°C'));
                          log(`Nachtabsenkung aktiv: ${setpoint}`);
                        } else {
                          log(`Keine Nachtabsenkung: ${setpoint}`);
                        }
                      }  

                      // Heizregelung
                      if (
                        items.getItem(heatingvalve).state === 'OFF' &&
                        currentTemperature.lessThanOrEqual(setpoint.subtract(Quantity(hysteresis + '°C')))
                      ) {
                        items.getItem(heatingvalve).sendCommand('ON');
                        log('Thermostat - heating on');
                      } else if (
                        items.getItem(heatingvalve).state === 'ON' &&
                        currentTemperature.greaterThanOrEqual(setpoint)
                      ) {
                        items.getItem(heatingvalve).sendCommand('OFF');
                        log('Thermostat - heating off');
                      }
                    } else {
                      if (items.getItem(heatingvalve).state === 'ON') {
                        items.getItem(heatingvalve).sendCommand('OFF');
                      }
                      log('Thermostat - OFF');
                    }
                  }
                }

                controlThermostat({
                  setpointTemperature: {{input:SETPOINTTEMPERATURE}},
                  heatingvalve: {{input:HEATINGVALVE}},
                  temperaturesensor: {{input:TEMPERATURESENSOR}},
                  thermostat: {{input:THERMOSTAT}},
                  hysteresis: {{input:HYSTERESIS}},              
                  absencereduction: {{input:ABSENCEREDUCTION}}, 
                  greenincrease: {{input:GREENINCREASE}}, 
                  nightstart: {{input:NIGHTSTART}}, 
                  nightstop: {{input:NIGHTSTOP}}, 
                  nightreduction: {{input:NIGHTREDUCTION}},
                  loglevel: "{{field:LOGLEVEL}}",
                  absence: {{input:ABSENCE}},
                  booster: {{input:BOOSTER}},
                  smartgrid: {{input:SMARTGRID}}
                });
        toolbox:
          - component: PresetInput
            config:
              name: THERMOSTAT
              shadow: true
              type: oh_item
          - component: PresetInput
            config:
              name: HEATINGVALVE
              shadow: true
              type: oh_item
          - component: PresetInput
            config:
              name: SETPOINTTEMPERATURE
              shadow: true
              type: oh_item
          - component: PresetInput
            config:
              name: TEMPERATURESENSOR
              shadow: true
              type: oh_item
          - component: PresetInput
            config:
              name: NIGHTSTART
              fields:
                TEXT: 19:00
              shadow: true
              type: text
          - component: PresetInput
            config:
              name: NIGHTSTOP
              fields:
                TEXT: 08:15
              shadow: true
              type: text
          - component: PresetInput
            config:
              name: HYSTERESIS
              fields:
                NUM: "0.2"
              shadow: true
              type: math_number
          - component: PresetInput
            config:
              name: ABSENCEREDUCTION
              fields:
                NUM: "1"
              shadow: true
              type: math_number
          - component: PresetInput
            config:
              name: GREENINCREASE
              fields:
                NUM: "0.5"
              shadow: true
              type: math_number
          - component: PresetInput
            config:
              name: NIGHTREDUCTION
              fields:
                NUM: "0.5"
              shadow: true
              type: math_number
          - component: PresetInput
            config:
              name: ABSENCE
              shadow: true
              type: oh_item
          - component: PresetInput
            config:
              name: BOOSTER
              shadow: true
              type: oh_item
          - component: PresetInput
            config:
              name: SMARTGRID
              shadow: true
              type: oh_item                  